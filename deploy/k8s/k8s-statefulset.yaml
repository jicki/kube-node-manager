apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kube-node-mgr
  namespace: kube-node-mgr
  labels:
    app: kube-node-mgr
spec:
  serviceName: kube-node-mgr
  replicas: 1
  selector:
    matchLabels:
      app: kube-node-mgr
  template:
    metadata:
      labels:
        app: kube-node-mgr
    spec:
      serviceAccountName: kube-node-mgr
      containers:
      - name: kube-node-mgr
        image: kube-node-mgr:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        env:
        # 应用基础配置
        - name: PORT
          value: "8080"
        - name: GIN_MODE
          valueFrom:
            configMapKeyRef:
              name: kube-node-mgr-config
              key: gin-mode
        - name: DATABASE_DSN
          value: "/app/data/kube-node-mgr.db"
        # JWT配置
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: kube-node-mgr-secret
              key: jwt-secret
        - name: JWT_EXPIRE_TIME
          value: "86400"
        # LDAP配置
        - name: LDAP_ENABLED
          valueFrom:
            configMapKeyRef:
              name: kube-node-mgr-config
              key: ldap-enabled
        - name: LDAP_HOST
          valueFrom:
            configMapKeyRef:
              name: kube-node-mgr-config
              key: ldap-host
              optional: true
        - name: LDAP_PORT
          valueFrom:
            configMapKeyRef:
              name: kube-node-mgr-config
              key: ldap-port
              optional: true
        - name: LDAP_BASE_DN
          valueFrom:
            configMapKeyRef:
              name: kube-node-mgr-config
              key: ldap-base-dn
              optional: true
        - name: LDAP_USER_FILTER
          valueFrom:
            configMapKeyRef:
              name: kube-node-mgr-config
              key: ldap-user-filter
              optional: true
        - name: LDAP_ADMIN_DN
          valueFrom:
            secretKeyRef:
              name: kube-node-mgr-secret
              key: ldap-admin-dn
              optional: true
        - name: LDAP_ADMIN_PASS
          valueFrom:
            secretKeyRef:
              name: kube-node-mgr-secret
              key: ldap-admin-pass
              optional: true
        volumeMounts:
        - name: data
          mountPath: /app/data
        - name: config
          mountPath: /app/configs
          readOnly: true
        - name: kube-config
          mountPath: /home/appuser/.kube
          readOnly: true
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: config
        configMap:
          name: kube-node-mgr-config
      - name: kube-config
        secret:
          secretName: kube-node-mgr-kubeconfig
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-node-mgr
  namespace: kube-node-mgr
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-node-mgr
rules:
# 节点管理权限
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch", "patch", "update"]
- apiGroups: [""]
  resources: ["nodes/status"]
  verbs: ["patch"]
# Pod管理权限 - 封锁、驱逐节点需要
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch", "delete"]
- apiGroups: [""]
  resources: ["pods/eviction"]
  verbs: ["create"]
# Metrics API权限
- apiGroups: ["metrics.k8s.io"]
  resources: ["nodes", "pods"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-node-mgr
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-node-mgr
subjects:
- kind: ServiceAccount
  name: kube-node-mgr
  namespace: kube-node-mgr

---
apiVersion: v1
kind: Secret
metadata:
  name: kube-node-mgr-secret
  namespace: kube-node-mgr
type: Opaque
data:
  jwt-secret: eW91ci1qd3Qtc2VjcmV0LWNoYW5nZS1pbi1wcm9kdWN0aW9u # base64: your-jwt-secret-change-in-production
  ldap-admin-dn: Y249YWRtaW4sZGM9ZXhhbXBsZSxkYz1jb20= # base64: cn=admin,dc=example,dc=com
  ldap-admin-pass: YWRtaW5fcGFzc3dvcmQ= # base64: admin_password